const renderFontSection = ({ name, value, comment, scale, weight }) =>
  `
### ${name}
${comment || ""}

**Font family**: \`${value}\`

<Typography
  family={${JSON.stringify(value)}}
  scale={${JSON.stringify(scale)}}
  sampleText="This is example text"
  fontWeight={${weight}}
/>
`;

const generateMDX = ({ options, families, scale, weight }) =>
  `{/* This file is automatically generated. Do not edit directly */}
import { Meta, Typeset } from '@storybook/blocks';
import { Typography } from '../../src/components/token-blocks/typography';

<Meta title="Tokens/${options.title || "Typography"}" />

# ${options.title || "Typography"}
${options.description ?? ""}

## Font families

${Object.entries(families)
  .map(([name, { value, comment }]) =>
    renderFontSection({
      name,
      value,
      comment,
      scale,
      weight,
    })
  )
  .join("\n")}


`;

function formatTypographyTokensAsStory({
  dictionary,
  platform,
  options,
  file,
}) {
  const { allTokens } = dictionary;
  console.log(JSON.stringify(allTokens, null, 2));

  const typography = allTokens.reduce(
    (built, { attributes, value, comment }) => {
      const { type, item } = attributes;

      return {
        ...built,
        [type]: {
          ...built[type],
          [item]: { value, comment },
        },
      };
    },
    {}
  );

  const scale = Object.entries(typography.size).map(([name, { value }]) => ({
    name,
    attributes: {
      fontSize: value,
      lineHeight: typography.lineHeight[name].value,
    },
  }));

  // console.log("Typography: ", JSON.stringify(typography, null, 2));

  return generateMDX({
    options,
    families: typography.families,
    scale,
    weight: typography.weight.normal.value,
  });
}

module.exports = formatTypographyTokensAsStory;
